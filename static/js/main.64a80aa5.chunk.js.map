{"version":3,"sources":["logo.svg","../node_modules/peerjs/dist sync","Sender.js","PeerService.js","Receiver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","peerServiceSender","PeerService","remoteStreams","connectWithPeer","peerId","conn","peer","connect","on","send","callToPeer","a","console","log","navigator","mediaDevices","getUserMedia","video","audio","stream","call","remoteStream","this","Peer","data","answer","document","createElement","autoplay","srcObject","body","appendChild","App","useState","value","setValue","useEffect","onChange","target","onClick","to","exact","path","Sender","Receiver","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,iBCA3C,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,I,gECLrBC,E,uHCDiBC,EAGnB,WAAYF,GAAK,IAAD,gCAFhBG,cAAgB,GAEA,KAuChBC,gBAAkB,SAAAC,GAChB,IAAMC,EAAO,EAAKC,KAAKC,QAAQH,GAC/BC,EAAKG,GAAG,QAAQ,WACdH,EAAKI,KAAK,WA1CE,KA8ChBC,WA9CgB,uCA8CH,WAAMN,GAAN,eAAAO,EAAA,6DACXC,QAAQC,IAAI,SADD,SAEUC,UAAUC,aAAaC,aAAa,CAACC,OAAO,EAAMC,OAAO,IAFnE,OAELC,EAFK,OAIXP,QAAQC,IAAIM,GAKC,EAAKb,KAAKc,KAAKhB,EAAQe,GAC/BX,GAAG,UAAU,SAACa,GAEjBT,QAAQC,IAAI,gBAAiBQ,MAZpB,2CA9CG,sDACdT,QAAQC,IAAId,GACZuB,KAAKhB,KAAO,IAAIiB,IAAKxB,GACrBuB,KAAKhB,KAAKE,GAAG,QAAQ,SAAST,GAC5Ba,QAAQC,IAAI,kBAAoBd,MAGlCuB,KAAKhB,KAAKE,GAAG,cAAc,SAACH,GAC1BA,EAAKG,GAAG,QAAQ,SAACgB,GAEfZ,QAAQC,IAAIW,SAIhBF,KAAKhB,KAAKE,GAAG,QAAQ,SAACY,GACpBA,EAAKK,SACLL,EAAKZ,GAAG,UAAU,SAACa,GAEjB,IAAM,EAAKnB,cAAcmB,EAAatB,IAAtC,CAIA,EAAKG,cAAcmB,EAAatB,IAAMsB,EACtC,IAAMJ,EAAQS,SAASC,cAAc,SACrCV,EAAMW,UAAW,EACjBX,EAAMY,UAAYR,EAClBK,SAASI,KAAKC,YAAYd,WDAnBe,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,qBADtB,mBACNC,EADM,KACCC,EADD,KAiBb,OAdAC,qBAAU,WACRpC,EAAoB,IAAIC,EAAY,iBACnC,IAaD,6BACE,6CACA,2BAAOoC,SAbe,SAAA3C,GACxByC,EAASzC,EAAE4C,OAAOJ,QAYoBA,MAAOA,IAC3C,4BAAQK,QAVe,WACzBvC,EAAkBG,gBAAgB+B,GAElClC,EAAkBU,WAAWwB,KAO3B,aEbSF,MAVf,WAKE,OAJAI,qBAAU,WACY,IAAInC,EAAY,uBAEnC,IAED,gD,MCuBW+B,MAnBf,WACE,OACE,6BACE,kBAAC,IAAD,CAAMQ,GAAG,KAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAChB,kBAACE,EAAD,WCZQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBtC,WACrBA,UAAUuC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.64a80aa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 30;","import React, { useState, useEffect } from 'react'\nimport PeerService from './PeerService'\n\nlet peerServiceSender\n\nfunction App() {\n  const [value, setValue] = useState('pacoRampasVazquez')\n  \n  useEffect(() => {\n    peerServiceSender = new PeerService('xxxx-sender')\n  }, [])\n\n  const handleValueChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleClickConnect = () => {\n    peerServiceSender.connectWithPeer(value)\n    \n    peerServiceSender.callToPeer(value)\n  }\n\n  return (\n    <div>\n      <h1>I am a sender</h1>\n      <input onChange={handleValueChange} value={value} />\n      <button onClick={handleClickConnect}>Connect</button>\n    </div>\n  );\n}\n\nexport default App","import Peer from 'peerjs'\n\nexport default class PeerService {\n  remoteStreams = {}\n\n  constructor(id) {\n    console.log(id)\n    this.peer = new Peer(id)\n    this.peer.on('open', function(id) {\n      console.log('My peer ID is: ' + id);\n    });\n\n    this.peer.on('connection', (conn) => {\n      conn.on('data', (data) => {\n        // Will print 'hi!'\n        console.log(data);\n      });\n    });\n\n    this.peer.on('call', (call) => {\n      call.answer()\n      call.on('stream', (remoteStream) => {\n        // Show stream in some <video> element.\n        if (!!this.remoteStreams[remoteStream.id]) {\n          return\n        }\n        \n        this.remoteStreams[remoteStream.id] = remoteStream\n        const video = document.createElement('video')\n        video.autoplay = true\n        video.srcObject = remoteStream\n        document.body.appendChild(video)\n      });\n      // navigator.mediaDevices.getUserMedia({video: true, audio: true}, (stream) => {\n      //   call.answer(stream); // Answer the call with an A/V stream.\n      //   call.on('stream', (remoteStream) => {\n      //     // Show stream in some <video> element.\n      //   });\n      // }, (err) => {\n      //   console.error('Failed to get local stream', err);\n      // });\n    });\n  }\n\n  connectWithPeer = peerId => {\n    const conn = this.peer.connect(peerId);\n    conn.on('open', () => {\n      conn.send('hi!');\n    });\n  }\n\n  callToPeer = async peerId => {\n    console.log('jijij')\n    const stream = await navigator.mediaDevices.getUserMedia({video: true, audio: true})\n    \n    console.log(stream)\n    // const video = document.createElement('video')\n    // video.srcObject = stream\n    // video.autoplay = true\n    // document.body.appendChild(video)\n    const call = this.peer.call(peerId, stream)\n    call.on('stream', (remoteStream) => {\n      // Show stream in some <video> element.\n      console.log('remote stream', remoteStream)\n    });\n  }\n}\n","import React, { useEffect } from 'react'\nimport PeerService from './PeerService'\n\nfunction App() {\n  useEffect(() => {\n    const peerService = new PeerService('pacoRampasVazquez')\n    \n  }, [])\n  return (\n    <h1>I am a receiver</h1>\n  );\n}\n\nexport default App","import React from 'react';\nimport logo from './logo.svg';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"\nimport Sender from './Sender'\nimport Receiver from './Receiver'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div>\n      <Link to=\"/\">Sender</Link>\n      <Link to=\"/receiver\">receiver</Link>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Sender />\n          </Route>\n          <Route exact path=\"/receiver\">\n            <Receiver />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}